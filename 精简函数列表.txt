1.
handler.postDelayed(()
2.
/**
     */
    @Override
    protected void onCreateActivity() {
        getWindow().getDecorView().setBackgroundColor(ThemeStore.backgroundColor(this));
        binding = ActivityAboutBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        @SuppressLint("UseCompatLoadingForDrawables")
        Drawable bk_e_ink = getResources().getDrawable(R.drawable.bg_card_view);
        findViewById(R.id.vm_app_name).setBackground(bk_e_ink);
        findViewById(R.id.vw_version).setBackground(bk_e_ink);
        findViewById(R.id.vw_update).setBackground(bk_e_ink);
        findViewById(R.id.vw_update_log).setBackground(bk_e_ink);
        findViewById(R.id.vw_git).setBackground(bk_e_ink);
        findViewById(R.id.vw_disclaimer).setBackground(bk_e_ink);
    }
3. ReadBookActivity
    @Override
    protected void initData() {
        mPresenter.saveProgress();
        // 显示菜单
        menuTopIn = AnimationUtils.loadAnimation(this, R.anim.anim_readbook_top_in);
        menuTopIn.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {
                // 手动设置状态栏颜色，不可以使用initImmersionBar()!
                initImmersionStatusBar();
                BookChapterBean durChapter = mPresenter.getDurChapter();
                BookSourceBean source = mPresenter.getBookSource();
                if (durChapter != null && source != null) {
                    if (TextUtils.isEmpty(source.getLoginUrl())) {
                        binding.login.setVisibility(View.GONE);
                        binding.pay.setVisibility(View.GONE);
                    } else if (durChapter.getIsVip() && !durChapter.getIsPay() && !TextUtils.isEmpty(source.getPayAction())) {
                        binding.login.setVisibility(View.VISIBLE);
                        binding.pay.setVisibility(View.VISIBLE);
                    } else {
                        binding.login.setVisibility(View.VISIBLE);
                    }
                } else {
                    binding.login.setVisibility(View.GONE);
                    binding.pay.setVisibility(View.GONE);
                }
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                binding.vMenuBg.setOnClickListener(v -> popMenuOut());
                int nbh = ActivityExtensionsKt.getNavigationBarHeight(ReadBookActivity.this);
                binding.readMenuBottom.setNavigationBarHeight(nbh);
                // 刷新阅读界面中的目录
                binding.tvChapterName.setText(mPresenter.getChapterList().get(mPageLoader.getCurChapterPos()).getDurChapterName());
            }

            @Override
            public void onAnimationRepeat(Animation animation) {}
        });
        menuBottomIn = AnimationUtils.loadAnimation(this, R.anim.anim_readbook_bottom_in);
        menuBottomIn.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {screenOffTimerStart();}

            @Override
            public void onAnimationEnd(Animation animation) {binding.vMenuBg.setOnClickListener(v -> popMenuOut());}

            @Override
            public void onAnimationRepeat(Animation animation) {}
        });

        // 隐藏菜单
        menuTopOut = AnimationUtils.loadAnimation(this, R.anim.anim_readbook_top_out);
        menuTopOut.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {binding.vMenuBg.setOnClickListener(null);}

            @Override
            public void onAnimationEnd(Animation animation) {
                binding.flMenu.setVisibility(View.INVISIBLE);
                binding.llMenuTop.setVisibility(View.INVISIBLE);
                binding.readMenuBottom.setVisibility(View.INVISIBLE);
                binding.readAdjustMarginPop.setVisibility(View.INVISIBLE);
                binding.readInterfacePop.setVisibility(View.INVISIBLE);
                binding.moreSettingPop.setVisibility(View.INVISIBLE);
                initImmersionBar();
            }

            @Override
            public void onAnimationRepeat(Animation animation) {}
        });
        menuBottomOut = AnimationUtils.loadAnimation(this, R.anim.anim_readbook_bottom_out);
        menuBottomOut.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {
                screenOffTimerStart();
                binding.vMenuBg.setOnClickListener(null);
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                binding.flMenu.setVisibility(View.INVISIBLE);
                binding.llMenuTop.setVisibility(View.INVISIBLE);
                binding.readMenuBottom.setVisibility(View.INVISIBLE);
                binding.readAdjustMarginPop.setVisibility(View.INVISIBLE);
                binding.readInterfacePop.setVisibility(View.INVISIBLE);
                binding.moreSettingPop.setVisibility(View.INVISIBLE);
            }

            @Override
            public void onAnimationRepeat(Animation animation) {}
        });
        menuTopIn.setDuration(0);
        menuTopOut.setDuration(0);
        menuBottomIn.setDuration(0);
        menuBottomOut.setDuration(0);
    }
4. 
case android.R.id.home:
                if (binding.drawer.isDrawerOpen(GravityCompat.START)) {
                    binding.drawer.closeDrawers();
//这一个有动画
                } else {
                    binding.drawer.openDrawer(GravityCompat.START, false);
                }
                break;
5.
private MoDialogHUD moDialogHUD;
6.
ThemeStore
7.
TintHelper
8.
setColorFilter